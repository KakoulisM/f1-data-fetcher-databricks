
import requests
import pandas as pd
import numpy as np
import time
from datetime import timedelta
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi


OPENF1_API_KEY = dbutils.secrets.get(scope="f1_scope", key="openf1_api_key")
MONGO_URI = dbutils.secrets.get(scope="f1_scope", key="mongo_uri")

HEADERS = {"Authorization": f"Bearer {OPENF1_API_KEY}"}

# MongoDB connection
mongo_client = MongoClient(MONGO_URI, server_api=ServerApi('1'))
mongo_db = mongo_client["f1data"]
mongo_collection = mongo_db["realtime"]


def fetch_json(url):
    try:
        resp = requests.get(url, headers=HEADERS, timeout=10)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"Error fetching {url}: {e}")
        return None

def convert_date_columns(df, columns):
    for col in columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], utc=True, errors='coerce')

def format_time(dt):
    return dt.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'


def get_latest_session_with_laps(driver_number):
    sessions_url = "https://api.openf1.org/v1/sessions"
    sessions_data = fetch_json(sessions_url)
    sessions_df = pd.DataFrame(sessions_data).sort_values("date_start", ascending=False)
    
    for _, session in sessions_df.iterrows():
        sk = session['session_key']
        laps = fetch_json(f"https://api.openf1.org/v1/laps?session_key={sk}&driver_number={driver_number}")
        if laps:
            return sk, session.get("session_name", sk)
    raise ValueError("No session with lap data found.")


driver_number = 16  # Charles Leclerc
session_key, session_name = get_latest_session_with_laps(driver_number)

print(f"ðŸ“¦ Using session: {session_name} (Key: {session_key})")

driver_data = fetch_json(f"https://api.openf1.org/v1/drivers?session_key={session_key}&driver_number={driver_number}") or []
driver_name = driver_data[0].get('full_name', 'Unknown') if driver_data else 'Unknown'

position_df = pd.DataFrame(fetch_json(f"https://api.openf1.org/v1/position?session_key={session_key}&driver_number={driver_number}") or [])
convert_date_columns(position_df, ['date'])

intervals_df = pd.DataFrame(fetch_json(f"https://api.openf1.org/v1/intervals?session_key={session_key}&driver_number={driver_number}") or [])
convert_date_columns(intervals_df, ['date'])

laps_df = pd.DataFrame(fetch_json(f"https://api.openf1.org/v1/laps?session_key={session_key}&driver_number={driver_number}") or [])
convert_date_columns(laps_df, ['date_start'])

stints_df = pd.DataFrame(fetch_json(f"https://api.openf1.org/v1/stints?session_key={session_key}&driver_number={driver_number}") or [])

start_time = laps_df['date_start'].min()
end_time = laps_df['date_start'].max() + timedelta(minutes=5)


current_time = start_time
step = timedelta(seconds=1)

while current_time < end_time:
    next_time = current_time + step
    url = f"https://api.openf1.org/v1/car_data?session_key={session_key}&driver_number={driver_number}&date>{format_time(current_time)}&date<{format_time(next_time)}"
    car_data = fetch_json(url) or []

    if not car_data:
        current_time = next_time
        time.sleep(0.1)
        continue

    car_df = pd.DataFrame(car_data)
    convert_date_columns(car_df, ['date'])

    lap_numbers = []
    for row_time in car_df['date']:
        lap_match = laps_df[laps_df['date_start'] <= row_time].sort_values('date_start', ascending=False).head(1)
        lap_num = lap_match['lap_number'].values[0] if not lap_match.empty else None
        lap_numbers.append(lap_num)

    car_df['lap_number'] = lap_numbers
    car_df = car_df.dropna(subset=['lap_number'])
    car_df['lap_number'] = car_df['lap_number'].astype(int)
    car_df['time_from_lap_start'] = car_df.groupby('lap_number')['date'].transform(lambda x: x - x.min())

    for _, row in car_df.iterrows():
        row_time = row['date']
        lap_number = row['lap_number']

        st_speed = laps_df[laps_df['lap_number'] == lap_number]['st_speed'].values[0] if not laps_df.empty else None

        position = position_df[position_df['date'] <= row_time].sort_values('date', ascending=False)['position'].head(1).values
        gap_to_leader = intervals_df[intervals_df['date'] <= row_time].sort_values('date', ascending=False)['gap_to_leader'].head(1).values

        stint_info = stints_df[(stints_df['lap_start'] <= lap_number) & (stints_df['lap_end'] >= lap_number)]
        compound = stint_info.iloc[0].get('compound') if not stint_info.empty else None
        tyre_age = stint_info.iloc[0].get('tyre_age_at_start') if not stint_info.empty else None
        stint_number = stint_info.iloc[0].get('stint_number') if not stint_info.empty else None

        output = {
            "date": row_time,
            "speed": row.get('speed'),
            "n_gear": row.get('n_gear'),
            "throttle": row.get('throttle'),
            "brake": row.get('brake'),
            "drs": row.get('drs'),
            "driver_name": driver_name,
            "session_name": session_name,
            "gap_to_leader": float(gap_to_leader[0]) if len(gap_to_leader) else None,
            "lap_number": lap_number,
            "st_speed": st_speed,
            "position": int(position[0]) if len(position) else None,
            "compound": compound,
            "tyre_age_at_start": tyre_age,
            "stint_number": stint_number,
            "time_from_lap_start": row['time_from_lap_start'].total_seconds()
        }

        mongo_collection.insert_one(output)

    current_time = next_time
    time.sleep(0.1)

print("âœ… Done fetching and uploading F1 data!")
